关于集合的总结

集合的种类

  最上面的接口：Collection
  在Collection之下有三种接口
    ■Set  ：无顺序，不可重复
	      ※但是LinkedHashSet和SortedSet有顺序
		  
	■List ：有顺序，可重复
	■Map  ：Key不可重复
	      ※SortedMap

  
  
集合的具体实现

  ■List    ArrayList    LinkedList                 
	
  ■Set                                HashSet    LinkedHashSet    TreeSet
    
  ■Map                                HashMap    LInkedHashMap    TreeMap
  
  
  Hash***是无顺序的基本实现。
  LinkedHash***是在Hash***的基础上，实现了插入顺序（Iteration）。
  Tree*是有顺序的。但不是插入顺序。他们实现了Comparable / Comparator接口，可以自定义排序（升序和降序）。
  

迭代器（Iterator）
  Fail-Fast
    当使用迭代器遍历一个集合的时候，集合的内容不可以被修改。如果被修改，则会抛出ConcurrentModificationException。
	这种情况大多出现在多线程环境中，但是单线程环境中也可以出现。
	※Java无法完全保证在这种情况下，ConcurrentModificationException一定会被抛出。
	  所以，不可以让程序依赖这一机制。
	  
  Fail-Safe
    迭代器会Copy一份集合。遍历COPY版的集合。这样可以保证不会发生ConcurrentModificationException异常。
	缺点：
	  保存一份COPY会有内存开销。
	  无法保证现在正在读取的数据，跟这个数据现在的样子是一样的。
	  
	具体的实现：
	  ConcurrentHashMap
	  CopyOnWriteArrayList
	  ConcurrentSkipListSet
	  
	
	
■实现原理

   HashMap的实现原理
     根据key的hash值，将value值存储在集合中合适的索引上。
	 判断连个key是否相等，使用hashCode()和equals()方法。
	
	
	 
■集合的效率比较
   
   Hash***由于使用哈希表实现，所以是无序的。不保存元素的顺序，所以比LinkHash***要快。
          增删改的时间复杂度是O(1)
		  
   Tree***内部使用树形结构实现，效率较慢。
          由于保存了顺序，增删改的时间复杂度为O(Log n)