■堆和栈的区别

 各司其职
   最主要的区别就是栈内存用来存储局部变量（不包括成员变量）和方法调用。
   而堆内存用来存储Java中的对象（因为成员变量属于对象，所以成员变量也在堆中）。
   无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。
   
 独有还是共享栈
   内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。
   而堆内存中的对象对所有线程可见。
   堆内存中的对象可以被所有线程访问。
   
 异常错误
   栈: 如果请求的栈内存超过了被允许的栈内存，则JVM会抛出java.lang.StackOverFlowError。
       如果栈内存被允许扩展，当尝试扩展栈内存时，系统没有足够的可用内存的话，JVM会抛出java.lang.OutOfMemoryError。
   堆： 如果是堆内存没有可用的空间存储生成的对象，JVM会抛出java.lang.OutOfMemoryError。
 
 空间大小  
   栈的内存要远远小于堆内存，如果你使用递归的话，那么你的栈很快就会充满。
   如果递归没有及时跳出，很可能发生StackOverFlowError问题。
   

   
■堆内存大小的设置

  -Xms选项可以设置堆的开始时的大小，-Xmx选项可以设置堆的最大值。
  -Xmn是新生代堆内存的大小。
  ※注意
    如果把堆的内存设置的过小，会导致gc被频繁启动，影响系统的性能。
	如果把设置的过大，会Gc的运行次数会减少，但是每一次运行的时间会很长，影响应答时间。
	如果把-Xms和-Xmx设置成相同的值，虚拟机会省去调整堆大小的开销，性能可能会提升。
	


■方法区
  是什么？
     是JVM规范规定的一块内存区域。
	 
  具体实现？	 
	 在HotSpot虚拟机中，被实现为永久代（PermGen）。
	 
  在什么位置？
     独立的内存空间，但是与堆内存空间相邻。（逻辑上独立，物理上在堆中。可以理解为可以单独控制，但是名义还是堆。）
	 
  存放什么？
      Java类的结构信息，字段和方法数据，构造方法和普通方法的字节码。（在JDK1.8中，被移出堆，移出虚拟机，叫做MetaSpace，使用本地内存）
	  运行时常量池(在JDK1.7中，被移动到堆中。受堆的控制。)
	  ※static变量也存在方法区中。（static变量在类第一次被加载时生成。）
	  
  垃圾回收
      永久代的垃圾回收和老年代的垃圾回收是绑定的。一旦其中一个区域被占满，这两个区都要进行垃圾回收。
	  可以通过-XX:MaxPermSize设置永久代的大小。
	  
	  
	  
■常量池
  是方法区的一部分。在JDK1.7中被移到了堆中。
  实际上分两种形态:静态常量池和运行时常量池。
  ◆静态常量池：就是.class文件中的常量池。
               .class文件中的常量池不仅仅包含字符串和数字的字面量（就是字面量而已，并非是对象），还包含类、方法的信息。占用class文件绝大部分。
  ◆运行时常量池：JVM虚拟机完成类的装载之后，将.class文件中的常量载入到内存中，并保存在方法区中。
  
  ※常量池的实现
    java中基本类型的包装类的大部分都实现了常量池技术，这些类是Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。
	另外Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。
    
   
   你可以通过-Xss选项设置栈内存的大小。
  
  
  