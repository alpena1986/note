Java当中特殊的类
　　■非静态内部类
　　　特点是可以访问外部类对象的成员和方法。
　　　内部类生成新对象的语法比较奇怪。如下：
　　　　OuterClass.InnerClass innerObject = OuterClass.new InnerClass();
　　　内部类的对象，就像外部类对象的寄生虫一样，注意，一个外部类对象显然可以有很多个内部类对象。
　　　这些内部类对象与外部类对象直接相连，可以直接访问外部类对象的成员和方法。
　　　注意１：内部类与外部类之间，可以互相访问私有成员。
　　　注意２：内部类之中，除了极特殊情况，不可以有静态成员。
　　　　　　　原因是静态成员的初始化早于外部类的对象的产生，假如一个静态成员是一个内部类本身的对象，造成的结果就是，内部类的对象产生时，外部类的对象还没产生。
　　　　　　　与自己寄生虫的地位不符。

　　■静态内部类
　　　静态内部类与外部类关系较少。静态内部类可以访问外部类的静态成员。
　　　
　　■匿名类
　　　匿名类被写在一个代码块中，并没有名字。
　　　匿名类实际上不是完全的匿名类，而是有名字的父类（包括接口）的匿名子类。
　　　匿名类没有声明阶段，直接进入使用阶段。当匿名类出现时，它就已经被用于实例化对象。
　　　使用方法大概如下：
　　　　MyInterface myInterface = new MyInterface() {
                @Override
                public void doSomething() {
                    System.out.println(number);
                }
            };
        这里面，new MyInterface()实际上是在调用父类的构造方法。
        匿名类中创建的新方法基本没什么意义，而覆盖父类方法的方法有意义。
        匿名类中的方法可以访问匿名类所在块中的变量，但是这个变量必须是final的。原因是编译器把块中的变量的值得拷贝放入了匿名类中，如果匿名类修改了这个变量，它修改的只是拷贝，这样会造成数据不整合。
        
        ■块中有名类
        　除了有名字之外，与匿名类相似。
        
        
